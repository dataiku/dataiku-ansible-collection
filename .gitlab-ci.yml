---
variables:
  PYTHON_IMAGE: "python:3.11"
  ANSIBLE_TEST_TARGET_PYTHON: 3.11
  DATAIKU_COMMUNITY_DOCKER_IMAGE: "dataiku/dss:14.0.0"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

stages:
  - sanity
  - unit-tests
  - integration-tests
  - build
  - publish

.job_base:
  before_script:
    - pip3 install -r requirements.txt
    - pip3 install -r requirements-dev.txt
  cache:
    key: dataiku-dss-$CI_COMMIT_REF_SLUG
    paths:
      - ".cache/pip"
    policy: pull
  tags:
    - docker

Run Sanity tests:
  extends: .job_base
  image: $PYTHON_IMAGE
  stage: sanity
  cache:
    policy: pull-push
  script:
    - ansible-galaxy collection install .
    - cd ~/.ansible/collections/ansible_collections/dataiku/dss
    - ansible-test sanity --local --python $ANSIBLE_TEST_TARGET_PYTHON

Run Unit tests:
  extends: .job_base
  image: $PYTHON_IMAGE
  stage: unit-tests
  script:
    - ansible-galaxy collection install .
    - cd ~/.ansible/collections/ansible_collections/dataiku/dss
    - ansible-test units --local --python $ANSIBLE_TEST_TARGET_PYTHON

Run Integration tests:
  extends: .job_base
  stage: integration-tests
  image: $DATAIKU_COMMUNITY_DOCKER_IMAGE
  variables:
    PIP_CACHE_DIR: "/home/dataiku/.cache/pip"
  cache:
    paths:
      - "/home/dataiku/.cache/pip"
  before_script:
    - /home/dataiku/run.sh > /dev/null &  # Start dss process
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    - export PATH=/home/dataiku/.local/bin:$PATH
    - cat $DATAIKU_LICENSE > /home/dataiku/dss/config/license.json
  script:
    - ansible-galaxy collection install .
    - cd ~/.ansible/collections/ansible_collections/dataiku/dss
    - ansible-test integration --local

Build Collection:
  extends: .job_base
  image: $PYTHON_IMAGE
  stage: build
  script:
    - ansible-galaxy collection build .
  artifacts:
    expire_in: 2hr
    paths:
      - dataiku-dss-*.tar.gz

Check Collection version:
  rules:
    - if: $CI_COMMIT_TAG
  stage: publish
  tags:
    - shell
  before_script:
    - VERSION_IN_TAG=${CI_COMMIT_TAG#v}
    - VERSION_IN_FILE=$(grep '^version:' galaxy.yml | awk '{print $2}')
  script: |
      if [[ "$VERSION_IN_TAG" != "$VERSION_IN_FILE" ]]; then
        echo "Version mismatch: Git tag is $VERSION_IN_TAG but galaxy.yml has $VERSION_IN_FILE"
        exit 1
      fi
  allow_failure: true
  dependencies: []

Publish to galaxy:
  rules:
    - if: $CI_COMMIT_TAG
  extends: .job_base
  image: $PYTHON_IMAGE
  stage: publish
  script:
    - ls
  needs:
    - job: Check Collection version
    - job: Build Collection
  dependencies:
    - Build Collection
